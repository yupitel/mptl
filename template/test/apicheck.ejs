var Config = require('./config'),
    async  = require('async'),
    http   = require('http');

var hostname = Config.hostname || 'localhost';
var port     = Config.port || 3000;

var options = {
  hostname: hostname,
  port: port
};

var tests = {};
var test;
var pathheader = Config.header || '/';
<% for (var i = 0; i < tables.length; i++) { -%>
  tests.<%= tables[i].name %> = {};
  test = tests.<%= tables[i].name %>;
  test.entity = require('../dao/<%= tables[i].name %>');
  test.path   = pathheader + '<%= tables[i].name %>';

<% } -%>

var cloneObject = function(input) {
  var output = {};
  for (var field in input) {
    if (input[field] instanceof Array) {
      output[field] = [];
      for (var i = 0; i < input[field].length; i++) {
        output[field].push(cloneObject(input[field][i]));
      }
    } else {
      if (input[field] instanceof Object) {
        output[field] = cloneObject(input[field]);
      } else {
        output[field] = input[field];
      }
    }
  }
  return output;
};


var executeTest = function(option, table) {
  // test : get -> post -> put -> delete
  // check each api
  var entity = table.entity;
  var ai  = entity.getAI();
  var pri = entity.getPrimaryKey();
  var priAry = [];
  var delcheck = false;

  if (pri) {
    for (var prikey in pri) {
      priAry.push(prikey);
    }
    if (priAry.length > 0) {
      if (!ai) {
        delcheck = true;
      } else {
        if (priAry.length > 1) {
          delcheck = true;
        } else {
          if (ai !== priAry[0]) {
            delcheck = true;
          }
        }
      }
    }
  }
  

  var fnRequest = function(option, object, cb) {

    var _toJson = function(object) {
      var json;
      if (object) {
        json = JSON.stringify(object);
      } else {
        json = '';
      }
      return json;
    };

    var _setHeader = function(json, headers) {
      var headers = headers || {};
      if (json && json.length > 0) {
        headers['Content-Type']   = 'application/json';
        headers['Content-Length'] = Buffer.byteLength(json);
      } else {
        headers['Content-Type']   = 'application/html';
      }
      return headers;
    };

    var json = _toJson(object);
    option.headers = _setHeader(json, option.headers);

    var req = http.request(option, function(res) {
      var output = '';
      console.log(option.path + ' : ' + option.method + ' : '+ res.statusCode);
      
      res.setEncoding('utf8');
      res.on('data', function (chunk) {
        output += chunk;
      });
      res.on('end', function() {
        var obj = JSON.parse(output);
        cb(null, obj);
      });
    });
    req.on('error', function(err) {
      cb(err, null);
    });
    if (json) {
      req.write(json);
    }
    req.end();
  };
    
  var fnTestGet = function(fn) {
    option.method = 'GET';
    var _cb = function(err, result) {
      if (err) {
        if (fn) {fn(err);}
        return;
      }
      var data;
      if (result && result.data) {
        data = result.data;
      } else {
        err = new Error('no data');
        err.type = 1;
        if (fn) {fn(err);}
        return;
      }
      var _cbnext = function(err, result) {
        if (data) {
          if (ai) {
            for (var i = 0; i < data.length; i++) {
              data[i][ai] = null;
            }
          }
        }
        if (fn) {fn(err, data);}
      }

      if (delcheck === true) {
        option.method = 'DELETE';
        var _cb = function(err, result) {
          if (fn) {fn(err);}
        };
        var object = {record: data};
        fnRequest(option, object, _cbnext);
      } else {
        _cbnext(err, result);
      }
    };
    var object = {limit: 10};
    fnRequest(option, object, _cb);
  };
    
  var fnTestPost = function(records, fn) {
    option.method = 'POST';
    var _cb = function(err, result) {
      var data;
      if (result && result.data) {
        data = result.data;
      }
      if (fn) {fn(err, data);}
    };
    var object = {record: records};
    fnRequest(option, object, _cb);
  };

  var fnTestPut = function(records, fn) {
    option.method = 'PUT';
    var _cb = function(err, result) {
      var data;
      if (result && result.data) {
        data = result.data;
      }
      if (fn) {fn(err, records);}
    };
    var object = {record: records};
    fnRequest(option, object, _cb);
  }; 

  var fnTestDelete = function(records, fn) {
    option.method = 'DELETE';
    var _cb = function(err, result) {
      if (fn) {fn(err);}
    };
    // set null to each external key
    for (var i = 0; i < records.length; i++) {
      var record = records[i];
      for (var key in pri) {
        if (record[key]) {
          pri[key] = record[key];
        } else {
          pri[key] = undefined;
        }
      }
      entity.setUndefined(record);
      for (var key in pri) {
        record[key] = pri[key];
      } 
    }

    var object = {record: records};
    fnRequest(option, object, _cb);
  };

  async.waterfall(
    [fnTestGet, fnTestPost, fnTestPut, fnTestDelete],
    function(err, result) {
      if (err) {
        console.log(err);
        if (err.type && err.type !== 1) {
          throw err;
        }
      }
      console.log('   \033[36mmapping\033[0m : complete');
    }
  );

};


for (var key in tests) {
  var table = tests[key];
  var op = cloneObject(options);
  op.path = table.path;
  executeTest(op, table);
}


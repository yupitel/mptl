var async     = require('async')
  , Entity    = require('../../dao/<%= classname %>')
  , Mapper    = require('../../dao/<%= classname %>Mapper')
  , ErrorCode = require('../../lib/errorcode')
  , Request   = require('../../lib/requestquery');

function getQuery(params) {
  var queparams = RouteUtil.getQueryParams(Class, params);
  return Util.createQueryWithParams(Class, queparams);
}

function execute(req, res, next, method, view) {
  var dbconn = req.dbconn;
  if (!dbconn) {
    return next(new Error('no db connection'));
  }

  var KeyTable = null;

  var fnParams = function(cb) {
    var params = {limit: 20};
    var reqparams = Request.getParameter(req, Entity.parse);
    if (reqparams) {
      Request.setParameter(reqparams, params, method);
    }
    cb(null, params);
  };

  var fnRepParams = function(params, cb) {
    if (!KeyTable) {
      return cb(null, params);
    }
    var _params = {};
    for (var ele in params) {
      if (params.hasOwnProperty(ele)) {
        if (KeyTable[ele]) {
          _params[KeyTable[ele]] = params[ele];
        } else {
          _params[ele] = params[ele];
        }
      }
    }
    return cb(null, _params);
  };

  var fnRequest = function(params, cb) {
    Request.request(dbconn, Entity, Mapper, params, method, view, cb);
  };

  async.waterfall([fnParams, fnRepParams, fnRequest], function(err, records) {
    if (err) {
      console.log(err);
      var errcode = err.code;
      if (!ErrorCode[errcode] || ErrorCode[errcode] !== true) {
        return next(err);
      }
    }
    res.jsonp({result: 'SUCCESS', data: records});
  });
}

module.exports = {
  index: function(req, res, next){
    execute(req, res, next, 'select', 'show');
  },
  create: function(req, res, next){
    execute(req, res, next, 'insert', 'create');
  },  
  show: function(req, res, next){
    execute(req, res, next, 'select', 'show');
  },  
  update: function(req, res, next){
    execute(req, res, next, 'update', 'update');
  } 
};
